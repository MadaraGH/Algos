Heaps

1. A heap data structure is a complete binary tree
   A complete binary tree - all level except the possibly the lowest right one is filled

2. max heap property - the root is the largest node and any given node is larger than it's child nodes
   min heap property - the root is the smallest node and any given node is smaller than its child nodes

3. Heapify - process of creating a min/max heap from a binary tree

create a heap from 3, 9, 2, 1, 4, 5

       3             1st we add them to a tree
     /   \           Here the indexes for 3, 9, 2, 1, 4, 5 -> 0, 1, 2, 3, 4, 5
    9     2          if we take the indexes of child nodes of ith index        
   / \    /          they're 2i+1 (left_child) and 2i+2 (right_child)
  1   4  5 

Then we start sorting from the first non leaf node which can be found from index n/2 -1
Then we start swapping INDICES if value[2i+1] > i or value[2i+2] > i
By that way we get the maximum on top.
If we want a min heap we then swap if value[2i+1] < i or value[2i+2] < i


       3            start with index 2n-1, which is index 2-->value 2
     /   \          swap 5 with 2, then we recursively heapify sub tree 2, since there's   
    9     5         no other nodes in 2, we moveon to the next index which is 1 (value 9)       
   / \    /          
  1   4  2 



       9           9 is already the biggest in that subtree, so we move on to the next index 0  
     /   \         9 > 3  so we swap, 9 > 5 so no swap there. The index that got swapped was 1
    3     5        so we recursively heapify that subtree         
   / \    /          
  1   4  2 


       9          swap 4 with 3. We recursively heapify the subtree at that index (4)   
     /   \        Thre's no more descendents for that index so that is the end of the heapifying process  
    4     2                  
   / \    /         
  1   3  5 


Insertion - we add the new node to the end of he heap, in the above case as the right child of index 2
Deletion - if the node to be deleted isn't at the end then we swap that node to the end and then delete it
After insertion and deletion we need to heapify the tree to maintain the min/max property




In c++ <algorithms> libarary, there's functions to convert a data structure into a heap

// range heap example
#include <algorithm>    // std::make_heap, std::pop_heap, std::push_heap, std::sort_heap
#include <vector>       // std::vector

int myints[] = {10,20,30,5,15};
std::vector<int> v(myints,myints+5);

std::make_heap (v.begin(),v.end()); //30 20 10 5 15 

std::pop_heap (v.begin(),v.end()); //the first element is sent to the back (30)
v.pop_back(); // 30 is removed

v.push_back(99); 
std::push_heap (v.begin(),v.end()); //element pushed keeping heap properties

//sort heap in acsending order
std::sort_heap (v.begin(),v.end());


//========================================== Heaps ======================================

class Heap
{
	vector<int> minHeapVec;
	vector<int> maxHeapVec;

public:
	Heap(vector<int>& vec)
		:minHeapVec(vec),
		maxHeapVec(vec)
	{
		create();
	}

private:
	void create()
	{
		int n = minHeapVec.size() / 2 - 1;

		for (int i = n; i >= 0; i--)
		{
			MinHeapify(i);
			MaxHeapify(i);
		}
	}

	int GetParent(int i)
	{
		return (i - 1) / 2;
	}

	int GetLeft(int i)
	{
		return (i * 2) + 1;
	}

	int GetRight(int i)
	{
		return (i * 2) + 2;
	}

	void MinHeapify(int current)
	{
		int size = minHeapVec.size();
		int ileft = GetLeft(current);
		int iright = GetRight(current);
		int smallest = current;

		if (ileft < size &&  minHeapVec[ileft] < minHeapVec[smallest])
			smallest = ileft;

		if (iright < size &&  minHeapVec[iright] < minHeapVec[smallest])
			smallest = iright;

		if (smallest != current)
		{
			swap(minHeapVec[smallest], minHeapVec[current]);
			MinHeapify(smallest);
		}
	}

	void MaxHeapify(int current)
	{
		int size = maxHeapVec.size();
		int ileft = GetLeft(current);
		int iright = GetRight(current);
		int largest = current;

		if (ileft < size &&  maxHeapVec[ileft] > maxHeapVec[largest])
			largest = ileft;

		if (iright < size &&  maxHeapVec[iright] > maxHeapVec[largest])
			largest = iright;

		if (largest != current)
		{
			swap(maxHeapVec[largest], maxHeapVec[current]);
			MaxHeapify(largest);
		}
	}

public:
	void Insert(int val)
	{
		int idx = minHeapVec.size();
		minHeapVec.push_back(val);
		maxHeapVec.push_back(val);

		int  i = idx;
		while (i >= 0 && minHeapVec[i] < minHeapVec[GetParent(i)])
		{
			swap(minHeapVec[i], minHeapVec[GetParent(i)]);
			i = GetParent(i);
		}

		i = idx;
		while (i >= 0 && maxHeapVec[i] > maxHeapVec[GetParent(i)])
		{
			swap(maxHeapVec[i], maxHeapVec[GetParent(i)]);
			i = GetParent(i);
		}
	}



	void Delete(int val)
	{
		int size = minHeapVec.size() - 1;
		int iMin = distance(minHeapVec.begin(), find(minHeapVec.begin(), minHeapVec.end(), val));
		int iMax = distance(maxHeapVec.begin(), find(maxHeapVec.begin(), maxHeapVec.end(), val));

		if (iMin != size)
			minHeapVec[iMin] = minHeapVec[size];
		minHeapVec.pop_back();

		if (iMax != size)
			maxHeapVec[iMax] = maxHeapVec[size];
		maxHeapVec.pop_back();

		// When deleting specific items from heap, we have to re-order the heap again
		// If we're only deleting from the top, then its no issue

		MinHeapify(iMin);
		MaxHeapify(iMax);

	}

};

int main()
{
	vector<int> vec = { 3, 9, 2, 1, 4, 5 };

	Heap heap(vec);
	heap.Insert(12);
	heap.Insert(6);

	heap.Delete(1);
	heap.Delete(4);
}